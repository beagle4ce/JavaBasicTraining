/*
 * This file is generated by jOOQ.
 */
package com.diamondfsd.jooq.learn.jooq.tables.daos;


import com.diamondfsd.jooq.learn.extend.ExtendDAOImpl;
import com.diamondfsd.jooq.learn.jooq.tables.TS9News;
import com.diamondfsd.jooq.learn.jooq.tables.records.S9NewsRecord;
import com.diamondfsd.jooq.learn.entity.S9News;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 新闻表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class S9NewsDao extends ExtendDAOImpl<S9NewsRecord, S9News, Integer> {

    /**
     * Create a new S9NewsDao without any configuration
     */
    public S9NewsDao() {
        super(TS9News.S9_NEWS, S9News.class);
    }

    /**
     * Create a new S9NewsDao with an attached configuration
     */
    @Autowired
    public S9NewsDao(Configuration configuration) {
        super(TS9News.S9_NEWS, S9News.class, configuration);
    }

    @Override
    public Integer getId(S9News object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S9News> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TS9News.S9_NEWS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<S9News> fetchById(Integer... values) {
        return fetch(TS9News.S9_NEWS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public S9News fetchOneById(Integer value) {
        return fetchOne(TS9News.S9_NEWS.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S9News> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(TS9News.S9_NEWS.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<S9News> fetchByTitle(String... values) {
        return fetch(TS9News.S9_NEWS.TITLE, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S9News> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(TS9News.S9_NEWS.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<S9News> fetchByContent(String... values) {
        return fetch(TS9News.S9_NEWS.CONTENT, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S9News> fetchRangeOfCreateTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(TS9News.S9_NEWS.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<S9News> fetchByCreateTime(Timestamp... values) {
        return fetch(TS9News.S9_NEWS.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S9News> fetchRangeOfUpdateTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(TS9News.S9_NEWS.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<S9News> fetchByUpdateTime(Timestamp... values) {
        return fetch(TS9News.S9_NEWS.UPDATE_TIME, values);
    }
}
