/*
 * This file is generated by jOOQ.
 */
package com.diamondfsd.jooq.learn.codegen.learn_jooq_2.tables.daos;


import com.diamondfsd.jooq.learn.codegen.learn_jooq_2.tables.TS7User;
import com.diamondfsd.jooq.learn.codegen.learn_jooq_2.tables.pojos.S7UserPojo;
import com.diamondfsd.jooq.learn.codegen.learn_jooq_2.tables.records.S7UserRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * USER TABLE
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class S7UserDao extends DAOImpl<S7UserRecord, S7UserPojo, Integer> {

    /**
     * Create a new S7UserDao without any configuration
     */
    public S7UserDao() {
        super(TS7User.S7_USER, S7UserPojo.class);
    }

    /**
     * Create a new S7UserDao with an attached configuration
     */
    @Autowired
    public S7UserDao(Configuration configuration) {
        super(TS7User.S7_USER, S7UserPojo.class, configuration);
    }

    @Override
    public Integer getId(S7UserPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TS7User.S7_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<S7UserPojo> fetchById(Integer... values) {
        return fetch(TS7User.S7_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public S7UserPojo fetchOneById(Integer value) {
        return fetchOne(TS7User.S7_USER.ID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(TS7User.S7_USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<S7UserPojo> fetchByUsername(String... values) {
        return fetch(TS7User.S7_USER.USERNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(TS7User.S7_USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<S7UserPojo> fetchByEmail(String... values) {
        return fetch(TS7User.S7_USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(TS7User.S7_USER.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<S7UserPojo> fetchByAddress(String... values) {
        return fetch(TS7User.S7_USER.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfCreateTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(TS7User.S7_USER.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<S7UserPojo> fetchByCreateTime(Timestamp... values) {
        return fetch(TS7User.S7_USER.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<S7UserPojo> fetchRangeOfUpdateTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(TS7User.S7_USER.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<S7UserPojo> fetchByUpdateTime(Timestamp... values) {
        return fetch(TS7User.S7_USER.UPDATE_TIME, values);
    }
}
